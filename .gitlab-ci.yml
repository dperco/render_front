stages:
  - deploy_dev
  - deploy_prod

default:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind

variables:
  DOCKER_TLS_CERTDIR: ''
  TAG: "$CI_COMMIT_TAG"
  APP_NAME: "planilla-rubik"
  WORDIR_BASE: "/home/SOURCE"

deploy_dev:
  stage: deploy_dev
  tags:
    - runner-mindfactory
  image: alpine:3.11
  variables:
    TYPE_APP: "frontend"
    WORDIR: "$WORDIR_BASE/$TYPE_APP/$APP_NAME"
  before_script:
  - apk update && apk add openssh-client bash curl
  - eval $(ssh-agent -s) 
  - echo "$SSH_PRIVATE_KEY_DEV_PEM" > /tmp/vm-rubik-dev-01.pem
  - chmod 400 /tmp/vm-rubik-dev-01.pem
  # Agregar la clave pública del host remoto al archivo known_hosts
  - mkdir -p ~/.ssh
  - ssh-keyscan -H $VM_IPADDRESS_DEV >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  script:
  # Detener el proceso que utiliza el puerto 3000
  - ssh -i /tmp/vm-rubik-dev-01.pem $SSH_USER@$VM_IPADDRESS_DEV "cd $WORDIR && pm2 delete planilla-rubik-frontend || true"
  # Eliminar el código y volver a clonar
  - ssh -i /tmp/vm-rubik-dev-01.pem $SSH_USER@$VM_IPADDRESS_DEV '
      eval "$(ssh-agent -s)" &&
      ssh-add /home/ubuntu/.ssh/gitlab-mf &&
      cd '"$WORDIR"' &&
      git pull
    '

  # Iniciar el nuevo proceso
  - ssh -i /tmp/vm-rubik-dev-01.pem $SSH_USER@$VM_IPADDRESS_DEV "cd $WORDIR && pm2 start 'npm run dev' --name planilla-rubik-frontend"

  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    #- if: '$DEPLOY_DEV == "TRUE"'
      #when: always
